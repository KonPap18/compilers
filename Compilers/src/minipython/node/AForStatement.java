/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AForStatement extends PStatement
{
    private TId _first_;
    private TId _second_;
    private PStatement _statement_;

    public AForStatement()
    {
    }

    public AForStatement(
        TId _first_,
        TId _second_,
        PStatement _statement_)
    {
        setFirst(_first_);

        setSecond(_second_);

        setStatement(_statement_);

    }
    public Object clone()
    {
        return new AForStatement(
            (TId) cloneNode(_first_),
            (TId) cloneNode(_second_),
            (PStatement) cloneNode(_statement_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAForStatement(this);
    }

    public TId getFirst()
    {
        return _first_;
    }

    public void setFirst(TId node)
    {
        if(_first_ != null)
        {
            _first_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _first_ = node;
    }

    public TId getSecond()
    {
        return _second_;
    }

    public void setSecond(TId node)
    {
        if(_second_ != null)
        {
            _second_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _second_ = node;
    }

    public PStatement getStatement()
    {
        return _statement_;
    }

    public void setStatement(PStatement node)
    {
        if(_statement_ != null)
        {
            _statement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _statement_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_first_)
            + toString(_second_)
            + toString(_statement_);
    }

    void removeChild(Node child)
    {
        if(_first_ == child)
        {
            _first_ = null;
            return;
        }

        if(_second_ == child)
        {
            _second_ = null;
            return;
        }

        if(_statement_ == child)
        {
            _statement_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_first_ == oldChild)
        {
            setFirst((TId) newChild);
            return;
        }

        if(_second_ == oldChild)
        {
            setSecond((TId) newChild);
            return;
        }

        if(_statement_ == oldChild)
        {
            setStatement((PStatement) newChild);
            return;
        }

    }
}
