/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.parser;

import minipython.lexer.*;
import minipython.node.*;
import minipython.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;

        if(actionTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Parser.class.getResourceAsStream("parser.dat")));

                // read actionTable
                int length = s.readInt();
                actionTable = new int[length][][];
                for(int i = 0; i < actionTable.length; i++)
                {
                    length = s.readInt();
                    actionTable[i] = new int[length][3];
                    for(int j = 0; j < actionTable[i].length; j++)
                    {
                        for(int k = 0; k < 3; k++)
                        {
                            actionTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read gotoTable
                length = s.readInt();
                gotoTable = new int[length][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][2];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        for(int k = 0; k < 2; k++)
                        {
                            gotoTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read errorMessages
                length = s.readInt();
                errorMessages = new String[length];
                for(int i = 0; i < errorMessages.length; i++)
                {
                    length = s.readInt();
                    StringBuffer buffer = new StringBuffer();

                    for(int j = 0; j < length; j++)
                    {
                        buffer.append(s.readChar());
                    }
                    errorMessages[i] = buffer.toString();
                }

                // read errors
                length = s.readInt();
                errors = new int[length];
                for(int i = 0; i < errors.length; i++)
                {
                    errors[i] = s.readInt();
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
            }
        }
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
	this.nodeList = listNode;

        if(!stack.hasNext())
        {
            stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int state()
    {
        State s = (State) stack.previous();
        stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return (ArrayList) ((State) stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        converter.index = -1;
        token.apply(converter);
        return converter.index;
    }

    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);

        List ign = null;
        while(true)
        {
            while(index(lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedLinkedList(NodeCast.instance);
                }

                ign.add(lexer.next());
            }

            if(ign != null)
            {
                ignoredTokens.setIn(lexer.peek(), ign);
                ign = null;
            }

            last_pos = lexer.peek().getPos();
            last_line = lexer.peek().getLine();
            last_token = lexer.peek();

            int index = index(lexer.peek());
            action[0] = actionTable[state()][0][1];
            action[1] = actionTable[state()][0][2];

            int low = 1;
            int high = actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[state()][middle][1];
                    action[1] = actionTable[state()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(lexer.next());
                        push(action[1], list);
                        last_shift = action[1];
                    }
		    break;
                case REDUCE:
                    switch(action[1])
                    {

                    case 0:
		    {
			ArrayList list = new0();
			push(goTo(0), list);
		    }
		    break;


                    case 1:
		    {
			ArrayList list = new1();
			push(goTo(0), list);
		    }
		    break;


                    case 2:
		    {
			ArrayList list = new2();
			push(goTo(1), list);
		    }
		    break;


                    case 3:
		    {
			ArrayList list = new3();
			push(goTo(1), list);
		    }
		    break;


                    case 4:
		    {
			ArrayList list = new4();
			push(goTo(2), list);
		    }
		    break;


                    case 5:
		    {
			ArrayList list = new5();
			push(goTo(2), list);
		    }
		    break;


                    case 6:
		    {
			ArrayList list = new6();
			push(goTo(3), list);
		    }
		    break;


                    case 7:
		    {
			ArrayList list = new7();
			push(goTo(4), list);
		    }
		    break;


                    case 8:
		    {
			ArrayList list = new8();
			push(goTo(4), list);
		    }
		    break;


                    case 9:
		    {
			ArrayList list = new9();
			push(goTo(5), list);
		    }
		    break;


                    case 10:
		    {
			ArrayList list = new10();
			push(goTo(5), list);
		    }
		    break;


                    case 11:
		    {
			ArrayList list = new11();
			push(goTo(5), list);
		    }
		    break;


                    case 12:
		    {
			ArrayList list = new12();
			push(goTo(5), list);
		    }
		    break;


                    case 13:
		    {
			ArrayList list = new13();
			push(goTo(6), list);
		    }
		    break;


                    case 14:
		    {
			ArrayList list = new14();
			push(goTo(7), list);
		    }
		    break;


                    case 15:
		    {
			ArrayList list = new15();
			push(goTo(7), list);
		    }
		    break;


                    case 16:
		    {
			ArrayList list = new16();
			push(goTo(7), list);
		    }
		    break;


                    case 17:
		    {
			ArrayList list = new17();
			push(goTo(7), list);
		    }
		    break;


                    case 18:
		    {
			ArrayList list = new18();
			push(goTo(7), list);
		    }
		    break;


                    case 19:
		    {
			ArrayList list = new19();
			push(goTo(7), list);
		    }
		    break;


                    case 20:
		    {
			ArrayList list = new20();
			push(goTo(7), list);
		    }
		    break;


                    case 21:
		    {
			ArrayList list = new21();
			push(goTo(7), list);
		    }
		    break;


                    case 22:
		    {
			ArrayList list = new22();
			push(goTo(7), list);
		    }
		    break;


                    case 23:
		    {
			ArrayList list = new23();
			push(goTo(7), list);
		    }
		    break;


                    case 24:
		    {
			ArrayList list = new24();
			push(goTo(7), list);
		    }
		    break;


                    case 25:
		    {
			ArrayList list = new25();
			push(goTo(7), list);
		    }
		    break;


                    case 26:
		    {
			ArrayList list = new26();
			push(goTo(7), list);
		    }
		    break;


                    case 27:
		    {
			ArrayList list = new27();
			push(goTo(7), list);
		    }
		    break;


                    case 28:
		    {
			ArrayList list = new28();
			push(goTo(7), list);
		    }
		    break;


                    case 29:
		    {
			ArrayList list = new29();
			push(goTo(7), list);
		    }
		    break;


                    case 30:
		    {
			ArrayList list = new30();
			push(goTo(7), list);
		    }
		    break;


                    case 31:
		    {
			ArrayList list = new31();
			push(goTo(7), list);
		    }
		    break;


                    case 32:
		    {
			ArrayList list = new32();
			push(goTo(8), list);
		    }
		    break;


                    case 33:
		    {
			ArrayList list = new33();
			push(goTo(9), list);
		    }
		    break;


                    case 34:
		    {
			ArrayList list = new34();
			push(goTo(9), list);
		    }
		    break;


                    case 35:
		    {
			ArrayList list = new35();
			push(goTo(9), list);
		    }
		    break;


                    case 36:
		    {
			ArrayList list = new36();
			push(goTo(9), list);
		    }
		    break;


                    case 37:
		    {
			ArrayList list = new37();
			push(goTo(10), list);
		    }
		    break;


                    case 38:
		    {
			ArrayList list = new38();
			push(goTo(10), list);
		    }
		    break;


                    case 39:
		    {
			ArrayList list = new39();
			push(goTo(10), list);
		    }
		    break;


                    case 40:
		    {
			ArrayList list = new40();
			push(goTo(10), list);
		    }
		    break;


                    case 41:
		    {
			ArrayList list = new41();
			push(goTo(10), list);
		    }
		    break;


                    case 42:
		    {
			ArrayList list = new42();
			push(goTo(10), list);
		    }
		    break;


                    case 43:
		    {
			ArrayList list = new43();
			push(goTo(10), list);
		    }
		    break;


                    case 44:
		    {
			ArrayList list = new44();
			push(goTo(11), list);
		    }
		    break;


                    case 45:
		    {
			ArrayList list = new45();
			push(goTo(11), list);
		    }
		    break;


                    case 46:
		    {
			ArrayList list = new46();
			push(goTo(11), list);
		    }
		    break;


                    case 47:
		    {
			ArrayList list = new47();
			push(goTo(11), list);
		    }
		    break;


                    case 48:
		    {
			ArrayList list = new48();
			push(goTo(12), list);
		    }
		    break;


                    case 49:
		    {
			ArrayList list = new49();
			push(goTo(12), list);
		    }
		    break;


                    case 50:
		    {
			ArrayList list = new50();
			push(goTo(12), list);
		    }
		    break;


                    case 51:
		    {
			ArrayList list = new51();
			push(goTo(13), list);
		    }
		    break;


                    case 52:
		    {
			ArrayList list = new52();
			push(goTo(13), list);
		    }
		    break;


                    case 53:
		    {
			ArrayList list = new53();
			push(goTo(14), list);
		    }
		    break;


                    case 54:
		    {
			ArrayList list = new54();
			push(goTo(14), list);
		    }
		    break;


                    case 55:
		    {
			ArrayList list = new55();
			push(goTo(15), list);
		    }
		    break;


                    case 56:
		    {
			ArrayList list = new56();
			push(goTo(15), list);
		    }
		    break;


                    case 57:
		    {
			ArrayList list = new57();
			push(goTo(16), list);
		    }
		    break;


                    case 58:
		    {
			ArrayList list = new58();
			push(goTo(17), list);
		    }
		    break;


                    case 59:
		    {
			ArrayList list = new59();
			push(goTo(18), list);
		    }
		    break;


                    case 60:
		    {
			ArrayList list = new60();
			push(goTo(18), list);
		    }
		    break;


                    case 61:
		    {
			ArrayList list = new61();
			push(goTo(19), list);
		    }
		    break;


                    case 62:
		    {
			ArrayList list = new62();
			push(goTo(19), list);
		    }
		    break;


                    case 63:
		    {
			ArrayList list = new63();
			push(goTo(20), list);
		    }
		    break;


                    case 64:
		    {
			ArrayList list = new64();
			push(goTo(20), list);
		    }
		    break;


                    case 65:
		    {
			ArrayList list = new65();
			push(goTo(21), list);
		    }
		    break;


                    case 66:
		    {
			ArrayList list = new66();
			push(goTo(21), list);
		    }
		    break;


                    case 67:
		    {
			ArrayList list = new67();
			push(goTo(22), list);
		    }
		    break;


                    case 68:
		    {
			ArrayList list = new68();
			push(goTo(22), list);
		    }
		    break;

                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.next();
                        PGoal node1 = (PGoal) ((ArrayList)pop()).get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }



    ArrayList new0()
    {
        ArrayList nodeList = new ArrayList();

        PGoal pgoalNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        }

        pgoalNode1 = new AGoal(listNode2);
        }
	nodeList.add(pgoalNode1);
        return nodeList;
    }



    ArrayList new1()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PGoal pgoalNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pgoalNode1 = new AGoal(listNode3);
        }
	nodeList.add(pgoalNode1);
        return nodeList;
    }



    ArrayList new2()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCommands pcommandsNode1;
        {
        PStatement pstatementNode2;
        pstatementNode2 = (PStatement)nodeArrayList1.get(0);

        pcommandsNode1 = new AStateCommands(pstatementNode2);
        }
	nodeList.add(pcommandsNode1);
        return nodeList;
    }



    ArrayList new3()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCommands pcommandsNode1;
        {
        PFunction pfunctionNode2;
        pfunctionNode2 = (PFunction)nodeArrayList1.get(0);

        pcommandsNode1 = new AFuncCommands(pfunctionNode2);
        }
	nodeList.add(pcommandsNode1);
        return nodeList;
    }



    ArrayList new4()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunction pfunctionNode1;
        {
        TDef tdefNode2;
        PIdentifier pidentifierNode3;
        TLPar tlparNode4;
        Object nullNode5 = null;
        TRPar trparNode6;
        TSemi tsemiNode7;
        PStatement pstatementNode8;
        tdefNode2 = (TDef)nodeArrayList1.get(0);
        pidentifierNode3 = (PIdentifier)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        tsemiNode7 = (TSemi)nodeArrayList5.get(0);
        pstatementNode8 = (PStatement)nodeArrayList6.get(0);

        pfunctionNode1 = new AFunctiondeclFunction(tdefNode2, pidentifierNode3, tlparNode4, null, trparNode6, tsemiNode7, pstatementNode8);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    ArrayList new5()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunction pfunctionNode1;
        {
        TDef tdefNode2;
        PIdentifier pidentifierNode3;
        TLPar tlparNode4;
        PArgument pargumentNode5;
        TRPar trparNode6;
        TSemi tsemiNode7;
        PStatement pstatementNode8;
        tdefNode2 = (TDef)nodeArrayList1.get(0);
        pidentifierNode3 = (PIdentifier)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pargumentNode5 = (PArgument)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tsemiNode7 = (TSemi)nodeArrayList6.get(0);
        pstatementNode8 = (PStatement)nodeArrayList7.get(0);

        pfunctionNode1 = new AFunctiondeclFunction(tdefNode2, pidentifierNode3, tlparNode4, pargumentNode5, trparNode6, tsemiNode7, pstatementNode8);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    ArrayList new6()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArg1 parg1Node1;
        {
        TEq teqNode2;
        PValue pvalueNode3;
        teqNode2 = (TEq)nodeArrayList1.get(0);
        pvalueNode3 = (PValue)nodeArrayList2.get(0);

        parg1Node1 = new AArg1(teqNode2, pvalueNode3);
        }
	nodeList.add(parg1Node1);
        return nodeList;
    }



    ArrayList new7()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArg2 parg2Node1;
        {
        TComma tcommaNode2;
        PIdentifier pidentifierNode3;
        Object nullNode4 = null;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pidentifierNode3 = (PIdentifier)nodeArrayList2.get(0);

        parg2Node1 = new AArg2(tcommaNode2, pidentifierNode3, null);
        }
	nodeList.add(parg2Node1);
        return nodeList;
    }



    ArrayList new8()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArg2 parg2Node1;
        {
        TComma tcommaNode2;
        PIdentifier pidentifierNode3;
        PArg1 parg1Node4;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pidentifierNode3 = (PIdentifier)nodeArrayList2.get(0);
        parg1Node4 = (PArg1)nodeArrayList3.get(0);

        parg2Node1 = new AArg2(tcommaNode2, pidentifierNode3, parg1Node4);
        }
	nodeList.add(parg2Node1);
        return nodeList;
    }



    ArrayList new9()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        PIdentifier pidentifierNode2;
        Object nullNode3 = null;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        {
        }

        pargumentNode1 = new AArgdeclArgument(pidentifierNode2, null, listNode4);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new10()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        PIdentifier pidentifierNode2;
        PArg1 parg1Node3;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        parg1Node3 = (PArg1)nodeArrayList2.get(0);
        {
        }

        pargumentNode1 = new AArgdeclArgument(pidentifierNode2, parg1Node3, listNode4);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new11()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        PIdentifier pidentifierNode2;
        Object nullNode3 = null;
        TypedLinkedList listNode5 = new TypedLinkedList();
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pargumentNode1 = new AArgdeclArgument(pidentifierNode2, null, listNode5);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new12()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArgument pargumentNode1;
        {
        PIdentifier pidentifierNode2;
        PArg1 parg1Node3;
        TypedLinkedList listNode5 = new TypedLinkedList();
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        parg1Node3 = (PArg1)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pargumentNode1 = new AArgdeclArgument(pidentifierNode2, parg1Node3, listNode5);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    ArrayList new13()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCexp pcexpNode1;
        {
        TComma tcommaNode2;
        PExpression pexpressionNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pcexpNode1 = new ACexp(tcommaNode2, pexpressionNode3);
        }
	nodeList.add(pcexpNode1);
        return nodeList;
    }



    ArrayList new14()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TIf tifNode3;
        PComparison pcomparisonNode4;
        TSemi tsemiNode5;
        PStatement pstatementNode6;
        {
        }
        tifNode3 = (TIf)nodeArrayList1.get(0);
        pcomparisonNode4 = (PComparison)nodeArrayList2.get(0);
        tsemiNode5 = (TSemi)nodeArrayList3.get(0);
        pstatementNode6 = (PStatement)nodeArrayList4.get(0);

        pstatementNode1 = new AIfStatement(listNode2, tifNode3, pcomparisonNode4, tsemiNode5, pstatementNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new15()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TIf tifNode4;
        PComparison pcomparisonNode5;
        TSemi tsemiNode6;
        PStatement pstatementNode7;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tifNode4 = (TIf)nodeArrayList2.get(0);
        pcomparisonNode5 = (PComparison)nodeArrayList3.get(0);
        tsemiNode6 = (TSemi)nodeArrayList4.get(0);
        pstatementNode7 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AIfStatement(listNode3, tifNode4, pcomparisonNode5, tsemiNode6, pstatementNode7);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new16()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TWhile twhileNode3;
        PComparison pcomparisonNode4;
        TSemi tsemiNode5;
        PStatement pstatementNode6;
        {
        }
        twhileNode3 = (TWhile)nodeArrayList1.get(0);
        pcomparisonNode4 = (PComparison)nodeArrayList2.get(0);
        tsemiNode5 = (TSemi)nodeArrayList3.get(0);
        pstatementNode6 = (PStatement)nodeArrayList4.get(0);

        pstatementNode1 = new AWhileStatement(listNode2, twhileNode3, pcomparisonNode4, tsemiNode5, pstatementNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new17()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TWhile twhileNode4;
        PComparison pcomparisonNode5;
        TSemi tsemiNode6;
        PStatement pstatementNode7;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        twhileNode4 = (TWhile)nodeArrayList2.get(0);
        pcomparisonNode5 = (PComparison)nodeArrayList3.get(0);
        tsemiNode6 = (TSemi)nodeArrayList4.get(0);
        pstatementNode7 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AWhileStatement(listNode3, twhileNode4, pcomparisonNode5, tsemiNode6, pstatementNode7);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new18()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TFor tforNode3;
        PIdentifier pidentifierNode4;
        TIn tinNode5;
        PIdentifier pidentifierNode6;
        TSemi tsemiNode7;
        PStatement pstatementNode8;
        {
        }
        tforNode3 = (TFor)nodeArrayList1.get(0);
        pidentifierNode4 = (PIdentifier)nodeArrayList2.get(0);
        tinNode5 = (TIn)nodeArrayList3.get(0);
        pidentifierNode6 = (PIdentifier)nodeArrayList4.get(0);
        tsemiNode7 = (TSemi)nodeArrayList5.get(0);
        pstatementNode8 = (PStatement)nodeArrayList6.get(0);

        pstatementNode1 = new AForStatement(listNode2, tforNode3, pidentifierNode4, tinNode5, pidentifierNode6, tsemiNode7, pstatementNode8);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new19()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TFor tforNode4;
        PIdentifier pidentifierNode5;
        TIn tinNode6;
        PIdentifier pidentifierNode7;
        TSemi tsemiNode8;
        PStatement pstatementNode9;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tforNode4 = (TFor)nodeArrayList2.get(0);
        pidentifierNode5 = (PIdentifier)nodeArrayList3.get(0);
        tinNode6 = (TIn)nodeArrayList4.get(0);
        pidentifierNode7 = (PIdentifier)nodeArrayList5.get(0);
        tsemiNode8 = (TSemi)nodeArrayList6.get(0);
        pstatementNode9 = (PStatement)nodeArrayList7.get(0);

        pstatementNode1 = new AForStatement(listNode3, tforNode4, pidentifierNode5, tinNode6, pidentifierNode7, tsemiNode8, pstatementNode9);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new20()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TReturn treturnNode3;
        PExpression pexpressionNode4;
        {
        }
        treturnNode3 = (TReturn)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);

        pstatementNode1 = new AReturnStatement(listNode2, treturnNode3, pexpressionNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new21()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TReturn treturnNode4;
        PExpression pexpressionNode5;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        treturnNode4 = (TReturn)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AReturnStatement(listNode3, treturnNode4, pexpressionNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new22()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TPrint tprintNode3;
        PExpression pexpressionNode4;
        TypedLinkedList listNode5 = new TypedLinkedList();
        {
        }
        tprintNode3 = (TPrint)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);
        {
        }

        pstatementNode1 = new APrintStatement(listNode2, tprintNode3, pexpressionNode4, listNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new23()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TPrint tprintNode4;
        PExpression pexpressionNode5;
        TypedLinkedList listNode6 = new TypedLinkedList();
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tprintNode4 = (TPrint)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);
        {
        }

        pstatementNode1 = new APrintStatement(listNode3, tprintNode4, pexpressionNode5, listNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new24()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        TPrint tprintNode3;
        PExpression pexpressionNode4;
        TypedLinkedList listNode6 = new TypedLinkedList();
        {
        }
        tprintNode3 = (TPrint)nodeArrayList1.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pstatementNode1 = new APrintStatement(listNode2, tprintNode3, pexpressionNode4, listNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new25()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        TPrint tprintNode4;
        PExpression pexpressionNode5;
        TypedLinkedList listNode7 = new TypedLinkedList();
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tprintNode4 = (TPrint)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);
        {
        TypedLinkedList listNode6 = new TypedLinkedList();
        listNode6 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pstatementNode1 = new APrintStatement(listNode3, tprintNode4, pexpressionNode5, listNode7);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new26()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        PIdentifier pidentifierNode3;
        TEq teqNode4;
        PExpression pexpressionNode5;
        {
        }
        pidentifierNode3 = (PIdentifier)nodeArrayList1.get(0);
        teqNode4 = (TEq)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AValuealocStatement(listNode2, pidentifierNode3, teqNode4, pexpressionNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new27()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        PIdentifier pidentifierNode4;
        TEq teqNode5;
        PExpression pexpressionNode6;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pidentifierNode4 = (PIdentifier)nodeArrayList2.get(0);
        teqNode5 = (TEq)nodeArrayList3.get(0);
        pexpressionNode6 = (PExpression)nodeArrayList4.get(0);

        pstatementNode1 = new AValuealocStatement(listNode3, pidentifierNode4, teqNode5, pexpressionNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new28()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        PIdentifier pidentifierNode3;
        TLBr tlbrNode4;
        PExpression pexpressionNode5;
        TRBr trbrNode6;
        TEq teqNode7;
        PExpression pexpressionNode8;
        {
        }
        pidentifierNode3 = (PIdentifier)nodeArrayList1.get(0);
        tlbrNode4 = (TLBr)nodeArrayList2.get(0);
        pexpressionNode5 = (PExpression)nodeArrayList3.get(0);
        trbrNode6 = (TRBr)nodeArrayList4.get(0);
        teqNode7 = (TEq)nodeArrayList5.get(0);
        pexpressionNode8 = (PExpression)nodeArrayList6.get(0);

        pstatementNode1 = new AValuealoc2Statement(listNode2, pidentifierNode3, tlbrNode4, pexpressionNode5, trbrNode6, teqNode7, pexpressionNode8);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new29()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        PIdentifier pidentifierNode4;
        TLBr tlbrNode5;
        PExpression pexpressionNode6;
        TRBr trbrNode7;
        TEq teqNode8;
        PExpression pexpressionNode9;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pidentifierNode4 = (PIdentifier)nodeArrayList2.get(0);
        tlbrNode5 = (TLBr)nodeArrayList3.get(0);
        pexpressionNode6 = (PExpression)nodeArrayList4.get(0);
        trbrNode7 = (TRBr)nodeArrayList5.get(0);
        teqNode8 = (TEq)nodeArrayList6.get(0);
        pexpressionNode9 = (PExpression)nodeArrayList7.get(0);

        pstatementNode1 = new AValuealoc2Statement(listNode3, pidentifierNode4, tlbrNode5, pexpressionNode6, trbrNode7, teqNode8, pexpressionNode9);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new30()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        PFunctionCall pfunctioncallNode3;
        {
        }
        pfunctioncallNode3 = (PFunctionCall)nodeArrayList1.get(0);

        pstatementNode1 = new ASfunctioncallStatement(listNode2, pfunctioncallNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new31()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStatement pstatementNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        PFunctionCall pfunctioncallNode4;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pfunctioncallNode4 = (PFunctionCall)nodeArrayList2.get(0);

        pstatementNode1 = new ASfunctioncallStatement(listNode3, pfunctioncallNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    ArrayList new32()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PCval pcvalNode1;
        {
        TComma tcommaNode2;
        PValue pvalueNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pvalueNode3 = (PValue)nodeArrayList2.get(0);

        pcvalNode1 = new ACval(tcommaNode2, pvalueNode3);
        }
	nodeList.add(pcvalNode1);
        return nodeList;
    }



    ArrayList new33()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PPraxi ppraxiNode1;
        {
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        ppraxiNode1 = new APlusPraxi(tplusNode2);
        }
	nodeList.add(ppraxiNode1);
        return nodeList;
    }



    ArrayList new34()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PPraxi ppraxiNode1;
        {
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        ppraxiNode1 = new AMinusPraxi(tminusNode2);
        }
	nodeList.add(ppraxiNode1);
        return nodeList;
    }



    ArrayList new35()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PPraxi ppraxiNode1;
        {
        TMult tmultNode2;
        tmultNode2 = (TMult)nodeArrayList1.get(0);

        ppraxiNode1 = new AMultPraxi(tmultNode2);
        }
	nodeList.add(ppraxiNode1);
        return nodeList;
    }



    ArrayList new36()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PPraxi ppraxiNode1;
        {
        TDiv tdivNode2;
        tdivNode2 = (TDiv)nodeArrayList1.get(0);

        ppraxiNode1 = new ADivPraxi(tdivNode2);
        }
	nodeList.add(ppraxiNode1);
        return nodeList;
    }



    ArrayList new37()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PIdentifier pidentifierNode2;
        TLBr tlbrNode3;
        PExpression pexpressionNode4;
        TRBr trbrNode5;
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        tlbrNode3 = (TLBr)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trbrNode5 = (TRBr)nodeArrayList4.get(0);

        pexpressionNode1 = new AExp2Expression(pidentifierNode2, tlbrNode3, pexpressionNode4, trbrNode5);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new38()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PFunctionCall pfunctioncallNode2;
        pfunctioncallNode2 = (PFunctionCall)nodeArrayList1.get(0);

        pexpressionNode1 = new AFunctExpression(pfunctioncallNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new39()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PValue pvalueNode2;
        pvalueNode2 = (PValue)nodeArrayList1.get(0);

        pexpressionNode1 = new AValExpression(pvalueNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new40()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        PIdentifier pidentifierNode2;
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);

        pexpressionNode1 = new AEidExpression(pidentifierNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new41()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TLPar tlparNode2;
        PExpression pexpressionNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pexpressionNode1 = new AExp3Expression(tlparNode2, pexpressionNode3, trparNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new42()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TLBr tlbrNode2;
        PValue pvalueNode3;
        TypedLinkedList listNode4 = new TypedLinkedList();
        TRBr trbrNode5;
        tlbrNode2 = (TLBr)nodeArrayList1.get(0);
        pvalueNode3 = (PValue)nodeArrayList2.get(0);
        {
        }
        trbrNode5 = (TRBr)nodeArrayList3.get(0);

        pexpressionNode1 = new AExp4Expression(tlbrNode2, pvalueNode3, listNode4, trbrNode5);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new43()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExpression pexpressionNode1;
        {
        TLBr tlbrNode2;
        PValue pvalueNode3;
        TypedLinkedList listNode5 = new TypedLinkedList();
        TRBr trbrNode6;
        tlbrNode2 = (TLBr)nodeArrayList1.get(0);
        pvalueNode3 = (PValue)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        trbrNode6 = (TRBr)nodeArrayList4.get(0);

        pexpressionNode1 = new AExp4Expression(tlbrNode2, pvalueNode3, listNode5, trbrNode6);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    ArrayList new44()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PSymb psymbNode1;
        {
        TGreat tgreatNode2;
        tgreatNode2 = (TGreat)nodeArrayList1.get(0);

        psymbNode1 = new AGreatSymb(tgreatNode2);
        }
	nodeList.add(psymbNode1);
        return nodeList;
    }



    ArrayList new45()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PSymb psymbNode1;
        {
        TLess tlessNode2;
        tlessNode2 = (TLess)nodeArrayList1.get(0);

        psymbNode1 = new ALessSymb(tlessNode2);
        }
	nodeList.add(psymbNode1);
        return nodeList;
    }



    ArrayList new46()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PSymb psymbNode1;
        {
        TNeq tneqNode2;
        tneqNode2 = (TNeq)nodeArrayList1.get(0);

        psymbNode1 = new ANeqSymb(tneqNode2);
        }
	nodeList.add(psymbNode1);
        return nodeList;
    }



    ArrayList new47()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PSymb psymbNode1;
        {
        TCeq tceqNode2;
        tceqNode2 = (TCeq)nodeArrayList1.get(0);

        psymbNode1 = new ACeqSymb(tceqNode2);
        }
	nodeList.add(psymbNode1);
        return nodeList;
    }



    ArrayList new48()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison pcomparisonNode1;
        {
        PExpression pexpressionNode2;
        PSymb psymbNode3;
        PExpression pexpressionNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        psymbNode3 = (PSymb)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pcomparisonNode1 = new ACompComparison(pexpressionNode2, psymbNode3, pexpressionNode4);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    ArrayList new49()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison pcomparisonNode1;
        {
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pcomparisonNode1 = new ATrueComparison(ttrueNode2);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    ArrayList new50()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PComparison pcomparisonNode1;
        {
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pcomparisonNode1 = new AFalseComparison(tfalseNode2);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    ArrayList new51()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunctionCall pfunctioncallNode1;
        {
        PIdentifier pidentifierNode2;
        TLPar tlparNode3;
        Object nullNode4 = null;
        TRPar trparNode5;
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode5 = (TRPar)nodeArrayList3.get(0);

        pfunctioncallNode1 = new AFunctioncallFunctionCall(pidentifierNode2, tlparNode3, null, trparNode5);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    ArrayList new52()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFunctionCall pfunctioncallNode1;
        {
        PIdentifier pidentifierNode2;
        TLPar tlparNode3;
        PArglist parglistNode4;
        TRPar trparNode5;
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        parglistNode4 = (PArglist)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pfunctioncallNode1 = new AFunctioncallFunctionCall(pidentifierNode2, tlparNode3, parglistNode4, trparNode5);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    ArrayList new53()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArglist parglistNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
        }

        parglistNode1 = new AArgsArglist(pexpressionNode2, listNode3);
        }
	nodeList.add(parglistNode1);
        return nodeList;
    }



    ArrayList new54()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PArglist parglistNode1;
        {
        PExpression pexpressionNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        parglistNode1 = new AArgsArglist(pexpressionNode2, listNode4);
        }
	nodeList.add(parglistNode1);
        return nodeList;
    }



    ArrayList new55()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {
        PNumber pnumberNode2;
        pnumberNode2 = (PNumber)nodeArrayList1.get(0);

        pvalueNode1 = new ANumbValue(pnumberNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new56()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PValue pvalueNode1;
        {
        TStringLiteral tstringliteralNode2;
        tstringliteralNode2 = (TStringLiteral)nodeArrayList1.get(0);

        pvalueNode1 = new AStringLiteralValue(tstringliteralNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    ArrayList new57()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PNumber pnumberNode1;
        {
        TIntegerLiteral tintegerliteralNode2;
        tintegerliteralNode2 = (TIntegerLiteral)nodeArrayList1.get(0);

        pnumberNode1 = new AIntLiterNumber(tintegerliteralNode2);
        }
	nodeList.add(pnumberNode1);
        return nodeList;
    }



    ArrayList new58()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PIdentifier pidentifierNode1;
        {
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pidentifierNode1 = new AIdIdentifier(tidNode2);
        }
	nodeList.add(pidentifierNode1);
        return nodeList;
    }



    ArrayList new59()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PCommands pcommandsNode1;
        pcommandsNode1 = (PCommands)nodeArrayList1.get(0);
	if(pcommandsNode1 != null)
	{
	  listNode2.add(pcommandsNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new60()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PCommands pcommandsNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pcommandsNode2 = (PCommands)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcommandsNode2 != null)
	{
	  listNode3.add(pcommandsNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new61()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PArg2 parg2Node1;
        parg2Node1 = (PArg2)nodeArrayList1.get(0);
	if(parg2Node1 != null)
	{
	  listNode2.add(parg2Node1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new62()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PArg2 parg2Node2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        parg2Node2 = (PArg2)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(parg2Node2 != null)
	{
	  listNode3.add(parg2Node2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new63()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        TTab ttabNode1;
        ttabNode1 = (TTab)nodeArrayList1.get(0);
	if(ttabNode1 != null)
	{
	  listNode2.add(ttabNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new64()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        TTab ttabNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        ttabNode2 = (TTab)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(ttabNode2 != null)
	{
	  listNode3.add(ttabNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new65()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PCexp pcexpNode1;
        pcexpNode1 = (PCexp)nodeArrayList1.get(0);
	if(pcexpNode1 != null)
	{
	  listNode2.add(pcexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new66()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PCexp pcexpNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pcexpNode2 = (PCexp)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcexpNode2 != null)
	{
	  listNode3.add(pcexpNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new67()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PCval pcvalNode1;
        pcvalNode1 = (PCval)nodeArrayList1.get(0);
	if(pcvalNode1 != null)
	{
	  listNode2.add(pcvalNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new68()
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PCval pcvalNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pcvalNode2 = (PCval)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcvalNode2 != null)
	{
	  listNode3.add(pcvalNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {0, SHIFT, 1}, {9, SHIFT, 2}, {19, SHIFT, 3}, {22, SHIFT, 4}, {23, SHIFT, 5}, {25, SHIFT, 6}, {26, SHIFT, 7}, {31, SHIFT, 8}, },
			{{-1, REDUCE, 63}, },
			{{-1, ERROR, 2}, {31, SHIFT, 8}, },
			{{-1, ERROR, 3}, {10, SHIFT, 18}, {12, SHIFT, 19}, {29, SHIFT, 20}, {30, SHIFT, 21}, {31, SHIFT, 8}, {32, SHIFT, 22}, {33, SHIFT, 23}, },
			{{-1, ERROR, 4}, {10, SHIFT, 18}, {12, SHIFT, 19}, {29, SHIFT, 20}, {30, SHIFT, 21}, {31, SHIFT, 8}, {32, SHIFT, 22}, {33, SHIFT, 23}, },
			{{-1, ERROR, 5}, {31, SHIFT, 8}, },
			{{-1, ERROR, 6}, {10, SHIFT, 18}, {12, SHIFT, 19}, {31, SHIFT, 8}, {32, SHIFT, 22}, {33, SHIFT, 23}, },
			{{-1, ERROR, 7}, {10, SHIFT, 18}, {12, SHIFT, 19}, {31, SHIFT, 8}, {32, SHIFT, 22}, {33, SHIFT, 23}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 9}, {34, ACCEPT, -1}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 14}, {5, SHIFT, 34}, {10, SHIFT, 35}, {12, SHIFT, 36}, },
			{{-1, REDUCE, 1}, {0, SHIFT, 1}, {9, SHIFT, 2}, {19, SHIFT, 3}, {22, SHIFT, 4}, {23, SHIFT, 5}, {25, SHIFT, 6}, {26, SHIFT, 7}, {31, SHIFT, 8}, },
			{{-1, ERROR, 16}, {0, SHIFT, 38}, {19, SHIFT, 39}, {22, SHIFT, 40}, {23, SHIFT, 41}, {25, SHIFT, 42}, {26, SHIFT, 43}, {31, SHIFT, 8}, },
			{{-1, ERROR, 17}, {10, SHIFT, 46}, },
			{{-1, ERROR, 18}, {10, SHIFT, 18}, {12, SHIFT, 19}, {31, SHIFT, 8}, {32, SHIFT, 22}, {33, SHIFT, 23}, },
			{{-1, ERROR, 19}, {32, SHIFT, 22}, {33, SHIFT, 23}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 24}, {6, SHIFT, 49}, {7, SHIFT, 50}, {27, SHIFT, 51}, {28, SHIFT, 52}, },
			{{-1, ERROR, 25}, {17, SHIFT, 54}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 40}, {10, SHIFT, 35}, {12, SHIFT, 55}, },
			{{-1, ERROR, 30}, {17, SHIFT, 56}, },
			{{-1, ERROR, 31}, {24, SHIFT, 57}, },
			{{-1, REDUCE, 22}, {14, SHIFT, 58}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 34}, {10, SHIFT, 18}, {12, SHIFT, 19}, {31, SHIFT, 8}, {32, SHIFT, 22}, {33, SHIFT, 23}, },
			{{-1, ERROR, 35}, {10, SHIFT, 18}, {11, SHIFT, 62}, {12, SHIFT, 19}, {31, SHIFT, 8}, {32, SHIFT, 22}, {33, SHIFT, 23}, },
			{{-1, ERROR, 36}, {10, SHIFT, 18}, {12, SHIFT, 19}, {31, SHIFT, 8}, {32, SHIFT, 22}, {33, SHIFT, 23}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 64}, },
			{{-1, ERROR, 39}, {10, SHIFT, 18}, {12, SHIFT, 19}, {29, SHIFT, 20}, {30, SHIFT, 21}, {31, SHIFT, 8}, {32, SHIFT, 22}, {33, SHIFT, 23}, },
			{{-1, ERROR, 40}, {10, SHIFT, 18}, {12, SHIFT, 19}, {29, SHIFT, 20}, {30, SHIFT, 21}, {31, SHIFT, 8}, {32, SHIFT, 22}, {33, SHIFT, 23}, },
			{{-1, ERROR, 41}, {31, SHIFT, 8}, },
			{{-1, ERROR, 42}, {10, SHIFT, 18}, {12, SHIFT, 19}, {31, SHIFT, 8}, {32, SHIFT, 22}, {33, SHIFT, 23}, },
			{{-1, ERROR, 43}, {10, SHIFT, 18}, {12, SHIFT, 19}, {31, SHIFT, 8}, {32, SHIFT, 22}, {33, SHIFT, 23}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 45}, {5, SHIFT, 71}, {10, SHIFT, 35}, {12, SHIFT, 72}, },
			{{-1, ERROR, 46}, {11, SHIFT, 73}, {31, SHIFT, 8}, },
			{{-1, ERROR, 47}, {11, SHIFT, 76}, },
			{{-1, ERROR, 48}, {13, SHIFT, 77}, {14, SHIFT, 78}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 53}, {10, SHIFT, 18}, {12, SHIFT, 19}, {31, SHIFT, 8}, {32, SHIFT, 22}, {33, SHIFT, 23}, },
			{{-1, ERROR, 54}, {0, SHIFT, 1}, {19, SHIFT, 3}, {22, SHIFT, 4}, {23, SHIFT, 5}, {25, SHIFT, 6}, {26, SHIFT, 7}, {31, SHIFT, 8}, },
			{{-1, ERROR, 55}, {10, SHIFT, 18}, {12, SHIFT, 19}, {31, SHIFT, 8}, {32, SHIFT, 22}, {33, SHIFT, 23}, },
			{{-1, ERROR, 56}, {0, SHIFT, 1}, {19, SHIFT, 3}, {22, SHIFT, 4}, {23, SHIFT, 5}, {25, SHIFT, 6}, {26, SHIFT, 7}, {31, SHIFT, 8}, },
			{{-1, ERROR, 57}, {31, SHIFT, 8}, },
			{{-1, ERROR, 58}, {10, SHIFT, 18}, {12, SHIFT, 19}, {31, SHIFT, 8}, {32, SHIFT, 22}, {33, SHIFT, 23}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 24}, {14, SHIFT, 58}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 53}, {14, SHIFT, 58}, },
			{{-1, ERROR, 64}, {11, SHIFT, 89}, },
			{{-1, ERROR, 65}, {13, SHIFT, 90}, },
			{{-1, ERROR, 66}, {17, SHIFT, 91}, },
			{{-1, ERROR, 67}, {17, SHIFT, 92}, },
			{{-1, ERROR, 68}, {24, SHIFT, 93}, },
			{{-1, REDUCE, 23}, {14, SHIFT, 58}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 71}, {10, SHIFT, 18}, {12, SHIFT, 19}, {31, SHIFT, 8}, {32, SHIFT, 22}, {33, SHIFT, 23}, },
			{{-1, ERROR, 72}, {10, SHIFT, 18}, {12, SHIFT, 19}, {31, SHIFT, 8}, {32, SHIFT, 22}, {33, SHIFT, 23}, },
			{{-1, ERROR, 73}, {17, SHIFT, 97}, },
			{{-1, ERROR, 74}, {11, SHIFT, 98}, },
			{{-1, REDUCE, 9}, {5, SHIFT, 99}, {14, SHIFT, 100}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 78}, {32, SHIFT, 22}, {33, SHIFT, 23}, },
			{{-1, REDUCE, 67}, },
			{{-1, ERROR, 80}, {13, SHIFT, 105}, {14, SHIFT, 78}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 83}, {13, SHIFT, 107}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 85}, {17, SHIFT, 108}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 54}, {14, SHIFT, 58}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 90}, {5, SHIFT, 109}, },
			{{-1, ERROR, 91}, {0, SHIFT, 1}, {19, SHIFT, 3}, {22, SHIFT, 4}, {23, SHIFT, 5}, {25, SHIFT, 6}, {26, SHIFT, 7}, {31, SHIFT, 8}, },
			{{-1, ERROR, 92}, {0, SHIFT, 1}, {19, SHIFT, 3}, {22, SHIFT, 4}, {23, SHIFT, 5}, {25, SHIFT, 6}, {26, SHIFT, 7}, {31, SHIFT, 8}, },
			{{-1, ERROR, 93}, {31, SHIFT, 8}, },
			{{-1, REDUCE, 25}, {14, SHIFT, 58}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 96}, {13, SHIFT, 113}, },
			{{-1, ERROR, 97}, {0, SHIFT, 1}, {19, SHIFT, 3}, {22, SHIFT, 4}, {23, SHIFT, 5}, {25, SHIFT, 6}, {26, SHIFT, 7}, {31, SHIFT, 8}, },
			{{-1, ERROR, 98}, {17, SHIFT, 115}, },
			{{-1, ERROR, 99}, {32, SHIFT, 22}, {33, SHIFT, 23}, },
			{{-1, ERROR, 100}, {31, SHIFT, 8}, },
			{{-1, REDUCE, 10}, {14, SHIFT, 100}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 11}, {14, SHIFT, 100}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 108}, {0, SHIFT, 1}, {19, SHIFT, 3}, {22, SHIFT, 4}, {23, SHIFT, 5}, {25, SHIFT, 6}, {26, SHIFT, 7}, {31, SHIFT, 8}, },
			{{-1, ERROR, 109}, {10, SHIFT, 18}, {12, SHIFT, 19}, {31, SHIFT, 8}, {32, SHIFT, 22}, {33, SHIFT, 23}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 112}, {17, SHIFT, 122}, },
			{{-1, ERROR, 113}, {5, SHIFT, 123}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 115}, {0, SHIFT, 1}, {19, SHIFT, 3}, {22, SHIFT, 4}, {23, SHIFT, 5}, {25, SHIFT, 6}, {26, SHIFT, 7}, {31, SHIFT, 8}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 7}, {5, SHIFT, 99}, },
			{{-1, REDUCE, 12}, {14, SHIFT, 100}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 122}, {0, SHIFT, 1}, {19, SHIFT, 3}, {22, SHIFT, 4}, {23, SHIFT, 5}, {25, SHIFT, 6}, {26, SHIFT, 7}, {31, SHIFT, 8}, },
			{{-1, ERROR, 123}, {10, SHIFT, 18}, {12, SHIFT, 19}, {31, SHIFT, 8}, {32, SHIFT, 22}, {33, SHIFT, 23}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 29}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 9}, },
			{{-1, 10}, {15, 37}, },
			{{-1, 11}, },
			{{-1, 101}, {117, 125}, },
			{{-1, 102}, {103, 119}, {118, 119}, },
			{{-1, 74}, },
			{{-1, 59}, {60, 87}, {88, 87}, {94, 87}, },
			{{-1, 12}, {54, 82}, {56, 84}, {91, 110}, {92, 111}, {97, 114}, {108, 120}, {115, 124}, {122, 126}, },
			{{-1, 79}, {80, 106}, },
			{{-1, -1}, },
			{{-1, 24}, {6, 32}, {7, 33}, {18, 47}, {34, 61}, {35, 63}, {36, 65}, {42, 69}, {43, 70}, {53, 81}, {55, 83}, {58, 86}, {71, 95}, {72, 96}, {109, 121}, {123, 127}, },
			{{-1, 53}, },
			{{-1, 25}, {4, 30}, {39, 66}, {40, 67}, },
			{{-1, 26}, {0, 13}, {15, 13}, {16, 44}, {54, 13}, {56, 13}, {91, 13}, {92, 13}, {97, 13}, {108, 13}, {115, 13}, {122, 13}, },
			{{-1, 64}, },
			{{-1, 27}, {19, 48}, {78, 104}, {99, 116}, },
			{{-1, 28}, },
			{{-1, 29}, {0, 14}, {2, 17}, {5, 31}, {15, 14}, {16, 45}, {41, 68}, {46, 75}, {54, 14}, {56, 14}, {57, 85}, {91, 14}, {92, 14}, {93, 112}, {97, 14}, {100, 117}, {108, 14}, {115, 14}, {122, 14}, },
			{{-1, 15}, },
			{{-1, 103}, {101, 118}, },
			{{-1, 16}, },
			{{-1, 60}, {63, 88}, {69, 94}, },
			{{-1, 80}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: tab, 'def', 'if', 'while', 'for', 'print', 'return', id, EOF",
			"expecting: tab, 'if', 'while', 'for', 'print', 'return', id",
			"expecting: id",
			"expecting: '(', '[', 'true', 'false', id, string literal, integer literal",
			"expecting: '(', '[', id, string literal, integer literal",
			"expecting: tab, '=', '!=', '==', 'def', '(', ')', '[', ']', ',', ':', 'if', 'while', 'for', 'in', 'print', 'return', '<', '>', id, EOF",
			"expecting: EOF",
			"expecting: '=', '(', '['",
			"expecting: '('",
			"expecting: string literal, integer literal",
			"expecting: ':'",
			"expecting: tab, '!=', '==', 'def', ')', ']', ',', ':', 'if', 'while', 'for', 'print', 'return', '<', '>', id, EOF",
			"expecting: '!=', '==', '<', '>'",
			"expecting: tab, '!=', '==', 'def', '(', ')', '[', ']', ',', ':', 'if', 'while', 'for', 'print', 'return', '<', '>', id, EOF",
			"expecting: 'in'",
			"expecting: tab, 'def', ',', 'if', 'while', 'for', 'print', 'return', id, EOF",
			"expecting: '(', ')', '[', id, string literal, integer literal",
			"expecting: ')', id",
			"expecting: ')'",
			"expecting: ']', ','",
			"expecting: tab, 'def', ')', ',', 'if', 'while', 'for', 'print', 'return', id, EOF",
			"expecting: ')', ','",
			"expecting: ']'",
			"expecting: '=', ')', ','",
			"expecting: '='",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 3, 2, 4, 4, 5, 6, 0, 0, 0, 0, 7, 0, 1, 8, 4, 9, 10, 10, 11, 11, 12, 10, 11, 11, 11, 13, 10, 14, 15, 0, 4, 16, 4, 0, 1, 3, 3, 2, 4, 4, 0, 7, 17, 18, 19, 4, 4, 4, 4, 4, 1, 4, 1, 2, 4, 20, 15, 0, 11, 21, 18, 22, 10, 10, 14, 15, 0, 4, 4, 10, 18, 23, 11, 11, 9, 19, 19, 10, 0, 22, 0, 10, 20, 20, 21, 11, 24, 1, 1, 2, 15, 0, 22, 1, 10, 9, 2, 21, 21, 21, 19, 11, 19, 11, 1, 4, 0, 0, 10, 24, 0, 1, 21, 23, 21, 21, 0, 0, 1, 4, 0, 21, 0, 0, 
        };*/
}
