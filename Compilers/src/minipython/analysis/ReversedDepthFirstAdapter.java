/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import minipython.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPGoal().apply(this);
        outStart(node);
    }

    public void inAGoal(AGoal node)
    {
        defaultIn(node);
    }

    public void outAGoal(AGoal node)
    {
        defaultOut(node);
    }

    public void caseAGoal(AGoal node)
    {
        inAGoal(node);
        {
            Object temp[] = node.getCommands().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PCommands) temp[i]).apply(this);
            }
        }
        outAGoal(node);
    }

    public void inAStatementCommands(AStatementCommands node)
    {
        defaultIn(node);
    }

    public void outAStatementCommands(AStatementCommands node)
    {
        defaultOut(node);
    }

    public void caseAStatementCommands(AStatementCommands node)
    {
        inAStatementCommands(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAStatementCommands(node);
    }

    public void inAFunctionCommands(AFunctionCommands node)
    {
        defaultIn(node);
    }

    public void outAFunctionCommands(AFunctionCommands node)
    {
        defaultOut(node);
    }

    public void caseAFunctionCommands(AFunctionCommands node)
    {
        inAFunctionCommands(node);
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        outAFunctionCommands(node);
    }

    public void inAFunctiondeclarationFunction(AFunctiondeclarationFunction node)
    {
        defaultIn(node);
    }

    public void outAFunctiondeclarationFunction(AFunctiondeclarationFunction node)
    {
        defaultOut(node);
    }

    public void caseAFunctiondeclarationFunction(AFunctiondeclarationFunction node)
    {
        inAFunctiondeclarationFunction(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getArgument() != null)
        {
            node.getArgument().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getDef() != null)
        {
            node.getDef().apply(this);
        }
        outAFunctiondeclarationFunction(node);
    }

    public void inAArg1(AArg1 node)
    {
        defaultIn(node);
    }

    public void outAArg1(AArg1 node)
    {
        defaultOut(node);
    }

    public void caseAArg1(AArg1 node)
    {
        inAArg1(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        outAArg1(node);
    }

    public void inAArg2(AArg2 node)
    {
        defaultIn(node);
    }

    public void outAArg2(AArg2 node)
    {
        defaultOut(node);
    }

    public void caseAArg2(AArg2 node)
    {
        inAArg2(node);
        if(node.getArg1() != null)
        {
            node.getArg1().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAArg2(node);
    }

    public void inAArgumentArgument(AArgumentArgument node)
    {
        defaultIn(node);
    }

    public void outAArgumentArgument(AArgumentArgument node)
    {
        defaultOut(node);
    }

    public void caseAArgumentArgument(AArgumentArgument node)
    {
        inAArgumentArgument(node);
        {
            Object temp[] = node.getArg2().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PArg2) temp[i]).apply(this);
            }
        }
        if(node.getArg1() != null)
        {
            node.getArg1().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAArgumentArgument(node);
    }

    public void inACexp(ACexp node)
    {
        defaultIn(node);
    }

    public void outACexp(ACexp node)
    {
        defaultOut(node);
    }

    public void caseACexp(ACexp node)
    {
        inACexp(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outACexp(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        {
            Object temp[] = node.getTab().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        outAIfStatement(node);
    }

    public void inAWhileStatement(AWhileStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileStatement(AWhileStatement node)
    {
        defaultOut(node);
    }

    public void caseAWhileStatement(AWhileStatement node)
    {
        inAWhileStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        {
            Object temp[] = node.getTab().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        outAWhileStatement(node);
    }

    public void inAForStatement(AForStatement node)
    {
        defaultIn(node);
    }

    public void outAForStatement(AForStatement node)
    {
        defaultOut(node);
    }

    public void caseAForStatement(AForStatement node)
    {
        inAForStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getIn() != null)
        {
            node.getIn().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        {
            Object temp[] = node.getTab().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        outAForStatement(node);
    }

    public void inAReturnStatement(AReturnStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnStatement(AReturnStatement node)
    {
        defaultOut(node);
    }

    public void caseAReturnStatement(AReturnStatement node)
    {
        inAReturnStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        {
            Object temp[] = node.getTab().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        outAReturnStatement(node);
    }

    public void inAPrintStatement(APrintStatement node)
    {
        defaultIn(node);
    }

    public void outAPrintStatement(APrintStatement node)
    {
        defaultOut(node);
    }

    public void caseAPrintStatement(APrintStatement node)
    {
        inAPrintStatement(node);
        {
            Object temp[] = node.getCexp().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PCexp) temp[i]).apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getPrint() != null)
        {
            node.getPrint().apply(this);
        }
        {
            Object temp[] = node.getTab().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        outAPrintStatement(node);
    }

    public void inAAllocation1Statement(AAllocation1Statement node)
    {
        defaultIn(node);
    }

    public void outAAllocation1Statement(AAllocation1Statement node)
    {
        defaultOut(node);
    }

    public void caseAAllocation1Statement(AAllocation1Statement node)
    {
        inAAllocation1Statement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            Object temp[] = node.getTab().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        outAAllocation1Statement(node);
    }

    public void inAAllocation2Statement(AAllocation2Statement node)
    {
        defaultIn(node);
    }

    public void outAAllocation2Statement(AAllocation2Statement node)
    {
        defaultOut(node);
    }

    public void caseAAllocation2Statement(AAllocation2Statement node)
    {
        inAAllocation2Statement(node);
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getRBr() != null)
        {
            node.getRBr().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        if(node.getLBr() != null)
        {
            node.getLBr().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            Object temp[] = node.getTab().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        outAAllocation2Statement(node);
    }

    public void inAFunctioncallStatement(AFunctioncallStatement node)
    {
        defaultIn(node);
    }

    public void outAFunctioncallStatement(AFunctioncallStatement node)
    {
        defaultOut(node);
    }

    public void caseAFunctioncallStatement(AFunctioncallStatement node)
    {
        inAFunctioncallStatement(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        {
            Object temp[] = node.getTab().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((TTab) temp[i]).apply(this);
            }
        }
        outAFunctioncallStatement(node);
    }

    public void inASomethingMultiplication(ASomethingMultiplication node)
    {
        defaultIn(node);
    }

    public void outASomethingMultiplication(ASomethingMultiplication node)
    {
        defaultOut(node);
    }

    public void caseASomethingMultiplication(ASomethingMultiplication node)
    {
        inASomethingMultiplication(node);
        if(node.getSomething() != null)
        {
            node.getSomething().apply(this);
        }
        outASomethingMultiplication(node);
    }

    public void inAMultiplicationMultiplication(AMultiplicationMultiplication node)
    {
        defaultIn(node);
    }

    public void outAMultiplicationMultiplication(AMultiplicationMultiplication node)
    {
        defaultOut(node);
    }

    public void caseAMultiplicationMultiplication(AMultiplicationMultiplication node)
    {
        inAMultiplicationMultiplication(node);
        if(node.getSomething() != null)
        {
            node.getSomething().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        outAMultiplicationMultiplication(node);
    }

    public void inADivisionMultiplication(ADivisionMultiplication node)
    {
        defaultIn(node);
    }

    public void outADivisionMultiplication(ADivisionMultiplication node)
    {
        defaultOut(node);
    }

    public void caseADivisionMultiplication(ADivisionMultiplication node)
    {
        inADivisionMultiplication(node);
        if(node.getSomething() != null)
        {
            node.getSomething().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        outADivisionMultiplication(node);
    }

    public void inAIdentifierSomething(AIdentifierSomething node)
    {
        defaultIn(node);
    }

    public void outAIdentifierSomething(AIdentifierSomething node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierSomething(AIdentifierSomething node)
    {
        inAIdentifierSomething(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierSomething(node);
    }

    public void inANumberSomething(ANumberSomething node)
    {
        defaultIn(node);
    }

    public void outANumberSomething(ANumberSomething node)
    {
        defaultOut(node);
    }

    public void caseANumberSomething(ANumberSomething node)
    {
        inANumberSomething(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outANumberSomething(node);
    }

    public void inAParSomething(AParSomething node)
    {
        defaultIn(node);
    }

    public void outAParSomething(AParSomething node)
    {
        defaultOut(node);
    }

    public void caseAParSomething(AParSomething node)
    {
        inAParSomething(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAParSomething(node);
    }

    public void inACval(ACval node)
    {
        defaultIn(node);
    }

    public void outACval(ACval node)
    {
        defaultOut(node);
    }

    public void caseACval(ACval node)
    {
        inACval(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outACval(node);
    }

    public void inAMultiplicationExpression(AMultiplicationExpression node)
    {
        defaultIn(node);
    }

    public void outAMultiplicationExpression(AMultiplicationExpression node)
    {
        defaultOut(node);
    }

    public void caseAMultiplicationExpression(AMultiplicationExpression node)
    {
        inAMultiplicationExpression(node);
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        outAMultiplicationExpression(node);
    }

    public void inAAdditionExpression(AAdditionExpression node)
    {
        defaultIn(node);
    }

    public void outAAdditionExpression(AAdditionExpression node)
    {
        defaultOut(node);
    }

    public void caseAAdditionExpression(AAdditionExpression node)
    {
        inAAdditionExpression(node);
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAAdditionExpression(node);
    }

    public void inASubtractionExpression(ASubtractionExpression node)
    {
        defaultIn(node);
    }

    public void outASubtractionExpression(ASubtractionExpression node)
    {
        defaultOut(node);
    }

    public void caseASubtractionExpression(ASubtractionExpression node)
    {
        inASubtractionExpression(node);
        if(node.getMultiplication() != null)
        {
            node.getMultiplication().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outASubtractionExpression(node);
    }

    public void inAExp2Expression(AExp2Expression node)
    {
        defaultIn(node);
    }

    public void outAExp2Expression(AExp2Expression node)
    {
        defaultOut(node);
    }

    public void caseAExp2Expression(AExp2Expression node)
    {
        inAExp2Expression(node);
        if(node.getRBr() != null)
        {
            node.getRBr().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLBr() != null)
        {
            node.getLBr().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAExp2Expression(node);
    }

    public void inAFunctioncallExpression(AFunctioncallExpression node)
    {
        defaultIn(node);
    }

    public void outAFunctioncallExpression(AFunctioncallExpression node)
    {
        defaultOut(node);
    }

    public void caseAFunctioncallExpression(AFunctioncallExpression node)
    {
        inAFunctioncallExpression(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outAFunctioncallExpression(node);
    }

    public void inAExp3Expression(AExp3Expression node)
    {
        defaultIn(node);
    }

    public void outAExp3Expression(AExp3Expression node)
    {
        defaultOut(node);
    }

    public void caseAExp3Expression(AExp3Expression node)
    {
        inAExp3Expression(node);
        if(node.getRBr() != null)
        {
            node.getRBr().apply(this);
        }
        {
            Object temp[] = node.getCval().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PCval) temp[i]).apply(this);
            }
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getLBr() != null)
        {
            node.getLBr().apply(this);
        }
        outAExp3Expression(node);
    }

    public void inAGreatSymb(AGreatSymb node)
    {
        defaultIn(node);
    }

    public void outAGreatSymb(AGreatSymb node)
    {
        defaultOut(node);
    }

    public void caseAGreatSymb(AGreatSymb node)
    {
        inAGreatSymb(node);
        if(node.getGreat() != null)
        {
            node.getGreat().apply(this);
        }
        outAGreatSymb(node);
    }

    public void inALessSymb(ALessSymb node)
    {
        defaultIn(node);
    }

    public void outALessSymb(ALessSymb node)
    {
        defaultOut(node);
    }

    public void caseALessSymb(ALessSymb node)
    {
        inALessSymb(node);
        if(node.getLess() != null)
        {
            node.getLess().apply(this);
        }
        outALessSymb(node);
    }

    public void inANeqSymb(ANeqSymb node)
    {
        defaultIn(node);
    }

    public void outANeqSymb(ANeqSymb node)
    {
        defaultOut(node);
    }

    public void caseANeqSymb(ANeqSymb node)
    {
        inANeqSymb(node);
        if(node.getNeq() != null)
        {
            node.getNeq().apply(this);
        }
        outANeqSymb(node);
    }

    public void inACeqSymb(ACeqSymb node)
    {
        defaultIn(node);
    }

    public void outACeqSymb(ACeqSymb node)
    {
        defaultOut(node);
    }

    public void caseACeqSymb(ACeqSymb node)
    {
        inACeqSymb(node);
        if(node.getCeq() != null)
        {
            node.getCeq().apply(this);
        }
        outACeqSymb(node);
    }

    public void inACompComparison(ACompComparison node)
    {
        defaultIn(node);
    }

    public void outACompComparison(ACompComparison node)
    {
        defaultOut(node);
    }

    public void caseACompComparison(ACompComparison node)
    {
        inACompComparison(node);
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getSymb() != null)
        {
            node.getSymb().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        outACompComparison(node);
    }

    public void inATrueComparison(ATrueComparison node)
    {
        defaultIn(node);
    }

    public void outATrueComparison(ATrueComparison node)
    {
        defaultOut(node);
    }

    public void caseATrueComparison(ATrueComparison node)
    {
        inATrueComparison(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueComparison(node);
    }

    public void inAFalseComparison(AFalseComparison node)
    {
        defaultIn(node);
    }

    public void outAFalseComparison(AFalseComparison node)
    {
        defaultOut(node);
    }

    public void caseAFalseComparison(AFalseComparison node)
    {
        inAFalseComparison(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseComparison(node);
    }

    public void inAFunctioncallFunctionCall(AFunctioncallFunctionCall node)
    {
        defaultIn(node);
    }

    public void outAFunctioncallFunctionCall(AFunctioncallFunctionCall node)
    {
        defaultOut(node);
    }

    public void caseAFunctioncallFunctionCall(AFunctioncallFunctionCall node)
    {
        inAFunctioncallFunctionCall(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getArglist() != null)
        {
            node.getArglist().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAFunctioncallFunctionCall(node);
    }

    public void inAArgsArglist(AArgsArglist node)
    {
        defaultIn(node);
    }

    public void outAArgsArglist(AArgsArglist node)
    {
        defaultOut(node);
    }

    public void caseAArgsArglist(AArgsArglist node)
    {
        inAArgsArglist(node);
        {
            Object temp[] = node.getCexp().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PCexp) temp[i]).apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAArgsArglist(node);
    }

    public void inANumberValue(ANumberValue node)
    {
        defaultIn(node);
    }

    public void outANumberValue(ANumberValue node)
    {
        defaultOut(node);
    }

    public void caseANumberValue(ANumberValue node)
    {
        inANumberValue(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberValue(node);
    }

    public void inAStringValue(AStringValue node)
    {
        defaultIn(node);
    }

    public void outAStringValue(AStringValue node)
    {
        defaultOut(node);
    }

    public void caseAStringValue(AStringValue node)
    {
        inAStringValue(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAStringValue(node);
    }

    public void inAIntegerNumber(AIntegerNumber node)
    {
        defaultIn(node);
    }

    public void outAIntegerNumber(AIntegerNumber node)
    {
        defaultOut(node);
    }

    public void caseAIntegerNumber(AIntegerNumber node)
    {
        inAIntegerNumber(node);
        if(node.getIntegerLiteral() != null)
        {
            node.getIntegerLiteral().apply(this);
        }
        outAIntegerNumber(node);
    }

    public void inAIdIdentifier(AIdIdentifier node)
    {
        defaultIn(node);
    }

    public void outAIdIdentifier(AIdIdentifier node)
    {
        defaultOut(node);
    }

    public void caseAIdIdentifier(AIdIdentifier node)
    {
        inAIdIdentifier(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdIdentifier(node);
    }
}
