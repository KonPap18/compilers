/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import minipython.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgramme().apply(this);
        outStart(node);
    }

    public void inAProgramme(AProgramme node)
    {
        defaultIn(node);
    }

    public void outAProgramme(AProgramme node)
    {
        defaultOut(node);
    }

    public void caseAProgramme(AProgramme node)
    {
        inAProgramme(node);
        {
            Object temp[] = node.getCommands().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PCommands) temp[i]).apply(this);
            }
        }
        outAProgramme(node);
    }

    public void inAStatementCommands(AStatementCommands node)
    {
        defaultIn(node);
    }

    public void outAStatementCommands(AStatementCommands node)
    {
        defaultOut(node);
    }

    public void caseAStatementCommands(AStatementCommands node)
    {
        inAStatementCommands(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAStatementCommands(node);
    }

    public void inAFunctionCommands(AFunctionCommands node)
    {
        defaultIn(node);
    }

    public void outAFunctionCommands(AFunctionCommands node)
    {
        defaultOut(node);
    }

    public void caseAFunctionCommands(AFunctionCommands node)
    {
        inAFunctionCommands(node);
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        outAFunctionCommands(node);
    }

    public void inAFunctionDeclarationFunction(AFunctionDeclarationFunction node)
    {
        defaultIn(node);
    }

    public void outAFunctionDeclarationFunction(AFunctionDeclarationFunction node)
    {
        defaultOut(node);
    }

    public void caseAFunctionDeclarationFunction(AFunctionDeclarationFunction node)
    {
        inAFunctionDeclarationFunction(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        {
            Object temp[] = node.getArgument().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PArgument) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAFunctionDeclarationFunction(node);
    }

    public void inAArgument(AArgument node)
    {
        defaultIn(node);
    }

    public void outAArgument(AArgument node)
    {
        defaultOut(node);
    }

    public void caseAArgument(AArgument node)
    {
        inAArgument(node);
        {
            Object temp[] = node.getAnotherArgument().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PAnotherArgument) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getArgumentAllocation().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PArgumentAllocation) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAArgument(node);
    }

    public void inAArgumentAllocation(AArgumentAllocation node)
    {
        defaultIn(node);
    }

    public void outAArgumentAllocation(AArgumentAllocation node)
    {
        defaultOut(node);
    }

    public void caseAArgumentAllocation(AArgumentAllocation node)
    {
        inAArgumentAllocation(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAArgumentAllocation(node);
    }

    public void inAAnotherArgument(AAnotherArgument node)
    {
        defaultIn(node);
    }

    public void outAAnotherArgument(AAnotherArgument node)
    {
        defaultOut(node);
    }

    public void caseAAnotherArgument(AAnotherArgument node)
    {
        inAAnotherArgument(node);
        {
            Object temp[] = node.getArgumentAllocation().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PArgumentAllocation) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAnotherArgument(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outAIfStatement(node);
    }

    public void inAWhileStatement(AWhileStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileStatement(AWhileStatement node)
    {
        defaultOut(node);
    }

    public void caseAWhileStatement(AWhileStatement node)
    {
        inAWhileStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outAWhileStatement(node);
    }

    public void inAForStatement(AForStatement node)
    {
        defaultIn(node);
    }

    public void outAForStatement(AForStatement node)
    {
        defaultOut(node);
    }

    public void caseAForStatement(AForStatement node)
    {
        inAForStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        outAForStatement(node);
    }

    public void inAReturnStatement(AReturnStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnStatement(AReturnStatement node)
    {
        defaultOut(node);
    }

    public void caseAReturnStatement(AReturnStatement node)
    {
        inAReturnStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAReturnStatement(node);
    }

    public void inAPrintStatement(APrintStatement node)
    {
        defaultIn(node);
    }

    public void outAPrintStatement(APrintStatement node)
    {
        defaultOut(node);
    }

    public void caseAPrintStatement(APrintStatement node)
    {
        inAPrintStatement(node);
        {
            Object temp[] = node.getAnotherExpression().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PAnotherExpression) temp[i]).apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAPrintStatement(node);
    }

    public void inAAllocation1Statement(AAllocation1Statement node)
    {
        defaultIn(node);
    }

    public void outAAllocation1Statement(AAllocation1Statement node)
    {
        defaultOut(node);
    }

    public void caseAAllocation1Statement(AAllocation1Statement node)
    {
        inAAllocation1Statement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAllocation1Statement(node);
    }

    public void inAAllocation2Statement(AAllocation2Statement node)
    {
        defaultIn(node);
    }

    public void outAAllocation2Statement(AAllocation2Statement node)
    {
        defaultOut(node);
    }

    public void caseAAllocation2Statement(AAllocation2Statement node)
    {
        inAAllocation2Statement(node);
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAllocation2Statement(node);
    }

    public void inAFunctionCallStatement(AFunctionCallStatement node)
    {
        defaultIn(node);
    }

    public void outAFunctionCallStatement(AFunctionCallStatement node)
    {
        defaultOut(node);
    }

    public void caseAFunctionCallStatement(AFunctionCallStatement node)
    {
        inAFunctionCallStatement(node);
        {
            Object temp[] = node.getArgumentsList().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PArgumentsList) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAFunctionCallStatement(node);
    }

    public void inAAnotherExpression(AAnotherExpression node)
    {
        defaultIn(node);
    }

    public void outAAnotherExpression(AAnotherExpression node)
    {
        defaultOut(node);
    }

    public void caseAAnotherExpression(AAnotherExpression node)
    {
        inAAnotherExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAAnotherExpression(node);
    }

    public void inAMultiplicationExpression(AMultiplicationExpression node)
    {
        defaultIn(node);
    }

    public void outAMultiplicationExpression(AMultiplicationExpression node)
    {
        defaultOut(node);
    }

    public void caseAMultiplicationExpression(AMultiplicationExpression node)
    {
        inAMultiplicationExpression(node);
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        outAMultiplicationExpression(node);
    }

    public void inADivisionExpression(ADivisionExpression node)
    {
        defaultIn(node);
    }

    public void outADivisionExpression(ADivisionExpression node)
    {
        defaultOut(node);
    }

    public void caseADivisionExpression(ADivisionExpression node)
    {
        inADivisionExpression(node);
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        outADivisionExpression(node);
    }

    public void inAAdditionExpression(AAdditionExpression node)
    {
        defaultIn(node);
    }

    public void outAAdditionExpression(AAdditionExpression node)
    {
        defaultOut(node);
    }

    public void caseAAdditionExpression(AAdditionExpression node)
    {
        inAAdditionExpression(node);
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        outAAdditionExpression(node);
    }

    public void inASubtractionExpression(ASubtractionExpression node)
    {
        defaultIn(node);
    }

    public void outASubtractionExpression(ASubtractionExpression node)
    {
        defaultOut(node);
    }

    public void caseASubtractionExpression(ASubtractionExpression node)
    {
        inASubtractionExpression(node);
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        outASubtractionExpression(node);
    }

    public void inAValueExpression(AValueExpression node)
    {
        defaultIn(node);
    }

    public void outAValueExpression(AValueExpression node)
    {
        defaultOut(node);
    }

    public void caseAValueExpression(AValueExpression node)
    {
        inAValueExpression(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAValueExpression(node);
    }

    public void inAIdentifierExpression(AIdentifierExpression node)
    {
        defaultIn(node);
    }

    public void outAIdentifierExpression(AIdentifierExpression node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierExpression(AIdentifierExpression node)
    {
        inAIdentifierExpression(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdentifierExpression(node);
    }

    public void inAFunctionCallExpression(AFunctionCallExpression node)
    {
        defaultIn(node);
    }

    public void outAFunctionCallExpression(AFunctionCallExpression node)
    {
        defaultOut(node);
    }

    public void caseAFunctionCallExpression(AFunctionCallExpression node)
    {
        inAFunctionCallExpression(node);
        {
            Object temp[] = node.getArgumentsList().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PArgumentsList) temp[i]).apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAFunctionCallExpression(node);
    }

    public void inAIdParExpression(AIdParExpression node)
    {
        defaultIn(node);
    }

    public void outAIdParExpression(AIdParExpression node)
    {
        defaultOut(node);
    }

    public void caseAIdParExpression(AIdParExpression node)
    {
        inAIdParExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdParExpression(node);
    }

    public void inAParValuesExpression(AParValuesExpression node)
    {
        defaultIn(node);
    }

    public void outAParValuesExpression(AParValuesExpression node)
    {
        defaultOut(node);
    }

    public void caseAParValuesExpression(AParValuesExpression node)
    {
        inAParValuesExpression(node);
        {
            Object temp[] = node.getAnotherValue().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PAnotherValue) temp[i]).apply(this);
            }
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAParValuesExpression(node);
    }

    public void inAParExpression(AParExpression node)
    {
        defaultIn(node);
    }

    public void outAParExpression(AParExpression node)
    {
        defaultOut(node);
    }

    public void caseAParExpression(AParExpression node)
    {
        inAParExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAParExpression(node);
    }

    public void inAAnotherValue(AAnotherValue node)
    {
        defaultIn(node);
    }

    public void outAAnotherValue(AAnotherValue node)
    {
        defaultOut(node);
    }

    public void caseAAnotherValue(AAnotherValue node)
    {
        inAAnotherValue(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAAnotherValue(node);
    }

    public void inAGreatComparison(AGreatComparison node)
    {
        defaultIn(node);
    }

    public void outAGreatComparison(AGreatComparison node)
    {
        defaultOut(node);
    }

    public void caseAGreatComparison(AGreatComparison node)
    {
        inAGreatComparison(node);
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        outAGreatComparison(node);
    }

    public void inALessComparison(ALessComparison node)
    {
        defaultIn(node);
    }

    public void outALessComparison(ALessComparison node)
    {
        defaultOut(node);
    }

    public void caseALessComparison(ALessComparison node)
    {
        inALessComparison(node);
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        outALessComparison(node);
    }

    public void inANeqComparison(ANeqComparison node)
    {
        defaultIn(node);
    }

    public void outANeqComparison(ANeqComparison node)
    {
        defaultOut(node);
    }

    public void caseANeqComparison(ANeqComparison node)
    {
        inANeqComparison(node);
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        outANeqComparison(node);
    }

    public void inACeqComparison(ACeqComparison node)
    {
        defaultIn(node);
    }

    public void outACeqComparison(ACeqComparison node)
    {
        defaultOut(node);
    }

    public void caseACeqComparison(ACeqComparison node)
    {
        inACeqComparison(node);
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        outACeqComparison(node);
    }

    public void inAArgumentsList(AArgumentsList node)
    {
        defaultIn(node);
    }

    public void outAArgumentsList(AArgumentsList node)
    {
        defaultOut(node);
    }

    public void caseAArgumentsList(AArgumentsList node)
    {
        inAArgumentsList(node);
        {
            Object temp[] = node.getAnotherExpression().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PAnotherExpression) temp[i]).apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAArgumentsList(node);
    }

    public void inANumberValue(ANumberValue node)
    {
        defaultIn(node);
    }

    public void outANumberValue(ANumberValue node)
    {
        defaultOut(node);
    }

    public void caseANumberValue(ANumberValue node)
    {
        inANumberValue(node);
        if(node.getIntegerLiteral() != null)
        {
            node.getIntegerLiteral().apply(this);
        }
        outANumberValue(node);
    }

    public void inAStringValue(AStringValue node)
    {
        defaultIn(node);
    }

    public void outAStringValue(AStringValue node)
    {
        defaultOut(node);
    }

    public void caseAStringValue(AStringValue node)
    {
        inAStringValue(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAStringValue(node);
    }
}
