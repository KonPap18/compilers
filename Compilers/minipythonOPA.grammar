Package minipython;

Helpers
	digit = ['0' .. '9'];
	letter = ['a' .. 'z']|['A' .. 'Z'];
	cr = 13; 
	lf = 10;
	all = [0..127]; 
	eol = lf | cr | cr lf ;
	not_eol = [all - [cr + lf]]; 
	not_quote_backslash = [[all - '\'] - '"'];
    string_char = not_quote_backslash | ('\' ( '"' | '\' | 'n' | 't' | 'r'));
	tab=9;
	
Tokens
	tab=9;
	plus = '+';
	minus = '-';
	mult = '*';
	div = '/';
	eq = '=';
	neq = '!=';
	ceq = '==';
	exclam = '!';
	def = 'def';
	l_par = '(';
	r_par = ')';
	l_br = '[';
	r_br = ']';
	comma= ',';
	dot = '.';
	qmark = '?';
	semi = ':';
	quote = '"';
	if = 'if';
	elif = 'elif';
	else = 'else';
	while = 'while';
	for = 'for';
	in = 'in';
	print = 'print';
	return = 'return';
	less = '<';
	great = '>';
	true = 'true';
	false = 'false';
	blank = (' ' | tab | lf | cr | cr lf)+;
	line_comment = tab* '#' not_eol* eol; 
	id = letter (letter | digit)*;
    string_literal= ('"' string_char* '"');
	integer_literal = ((digit+ '.' digit*) | (digit* '.' digit+));
	
Ignored Tokens
	blank, line_comment;
	
Productions
		goal = commands*;

		commands = {state} statement
					| {func} function;

		function = {functiondecl} def identifier l_par argument? r_par semi statement;
		
		arg1 = eq value;
		arg2 = comma identifier arg1?;
		argument = {argdecl} identifier arg1? arg2*;			
		
		cexp = comma expression;
		statement = {if} tab* if comparison semi statement 
					| {while} tab* while comparison semi statement 
					| {for} tab* for [first]:identifier in [second]:identifier semi statement
					| {return} tab* return expression
					| {print} tab* print expression cexp*
					| {valuealoc} tab* identifier eq expression 
					| {valuealoc2} tab* identifier l_br [first]:expression r_br eq [second]:expression
					| {sfunctioncall} tab* function_call;
		
		cval = comma value;
		praxi = {plus} plus
				| {minus} minus
				| {mult} mult
				| {div} div;
		expression = {praxh} [first]:expression praxi [second]:expression
					| {exp2} identifier l_br expression r_br
					| {funct} function_call
					| {val} value
					| {eid} identifier
					| {exp3} l_par expression r_par
					| {exp4} l_br value cval* r_br; 
		
		symb = {great} great
				| {less} less
				| {neq} neq
				| {ceq} ceq;
	    comparison = {comp} [first]:expression symb [second]:expression
						| {true} true 
						| {false} false;
				  
		function_call = {functioncall} identifier l_par arglist? r_par;
		
		arglist = {args} expression cexp*;
		
		value = {numb} number
				|{string_literal} string_literal;
		
	    number = {int_liter} integer_literal;
		
        identifier     = {id} id;		